# SSH Tunnel Action
# =================
#
# This action will create a reverse ssh tunnel to a github runner.
#
# ```
# steps:
#   - name: SSH Tunnel
#     uses: ./.github/actions/ssh-tunnel
#     with:
#       offer: <my spd offer>
#       public_key: <my public key>
# ```
---
name: ssh-tunnel
description: SSH Reverse Tunnel

inputs:
  public_key:
    required: true
    description: Public key to accept for reverse tunnel. Warning, this should not be the public key for the 'private_key' input.
  offer:
    required: true
    description: RTC offer

runs:
  using: composite
  steps:
    - uses: actions/checkout@v4

    - uses: actions/setup-python@v5
      with:
        python-version: '3.10'

    - name: Install ssh
      if: ${{ runner.os == 'Windows' }}
      shell: powershell
      run: |
          python3.exe -m pip install requests
          python3.exe installssh.py

    - name: Start SSH
      if: ${{ runner.os == 'Windows' }}
      shell: powershell
      run: |
        Start-Service sshd

    - name: Show sshd configuration
      shell: bash
      run: |
        if [ "$RUNNER_OS" == "Linux" ]; then
          cat /etc/ssh/sshd_config
        elif [ "$RUNNER_OS" == "macOS" ]; then
          cat /private/etc/ssh/sshd_config
        else
          cat "C:\ProgramData\ssh\sshd_config"
        fi

    - name: Add ssh public key
      shell: sh
      run: |
        if [ "$RUNNER_OS" == "Linux" ]; then
          mkdir -p /home/runner/.ssh
          chmod 700 /home/runner/.ssh
          touch /home/runner/.ssh/authorized_keys
          echo "${{ inputs.public_key }}" | tee -a /home/runner/.ssh/authorized_keys
        elif [ "$RUNNER_OS" == "macOS" ]; then
          BASE_DIR=Users
          mkdir -p /Users/runner/.ssh
          chmod 700 /Users/runner/.ssh
          touch /Users/runner/.ssh/authorized_keys
          echo "${{ inputs.public_key }}" | tee -a /Users/runner/.ssh/authorized_keys
        else
          mkdir -p "C:\Users\runneradmin\.ssh"
          chmod 700 "C:\Users\runneradmin\.ssh"
          echo "${{ inputs.public_key }}" | tee -a "C:\Users\runneradmin\.ssh\authorized_keys"
        fi

    - name: netstat
      shell: bash
      run: |
        if [ "$RUNNER_OS" == "Linux" ]; then
          netstat -ntlp
        elif [ "$RUNNER_OS" == "macOS" ]; then
          netstat -ntl
        else
          netstat -a
        fi

    #- name: Stop SSH
    #  if: ${{ runner.os == 'Windows' }}
    #  shell: powershell
    #  shell: ${{ runner.os == 'Windows' && 'powershell' || 'bash' }}
    #  run: |
    #    Stop-Service sshd

    - name: Create rtc tunnel
      shell: bash
      run: |
        python3 -m pip install aiortc
        echo '${{ inputs.offer }}' | python -m rtcforward -v --port 22 answer

    #- name: Create rtc tunnel (Windows)
    #  if: ${{ runner.os == 'Windows' }}
    #  shell: powershell
    #  run: |
    #    python3 -m pip install aiortc
    #    $psi = New-Object System.Diagnostics.ProcessStartInfo;
    #    $psi.FileName = "python.exe";
    #    $psi.Arguments = "-m rtcforward -v answer --port=22";
    #    $psi.UseShellExecute = $false;
    #    $psi.RedirectStandardInput = $true;
    #    $p = [System.Diagnostics.Process]::Start($psi);
    #    Start-Sleep -s 2
    #    $p.StandardInput.WriteLine("${{ inputs.offer }}");
    #    $p.StandardInput.Close();
    #    $p.WaitForExit()

